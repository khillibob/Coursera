result$y[i] = state;
i = i+1;
}
r
head(newdata)
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
state="AK"
state_flag <- newdata[newdata$State==state,];
num = nrow(state_flag);
result$x[i] = state_flag[num,1];
result$y[i] = state;
i<-1;
state_flag <- newdata[newdata$State==state,];
num = nrow(state_flag);
result$x[i] = state_flag[num,1];
result$y[i] = state;
i = i+1;
result
state_flag
newdata <- newdata[!(newdata$PNDeath=='Not Available'),];
newdata <- newdata[!(newdata$PNDeath=='NA'),];
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
state="AK"
state_flag <- newdata[newdata$State==state,];
state_flag$PNDeath
sum((newdata$PNDeath=='NA'))
sum(newdata$PNDeath=='NA')
newdata$PNDeath=='NA'
newdata <- newdata[!(newdata$PNDeath=='Not Available'),];
newdata <- newdata[!is.na(newdata$PNDeath),];
print(state)
state_flag <- newdata[newdata$State==state,];
num = nrow(state_flag);
result$x[i] = state_flag[num,1];
result$y[i] = state;
result
#setwd("D:/Coursera/R_Programming/Week4")
setwd("~/Documents/Coursera/R_Programming/Week4")
best <- function(state, outcome) {
## Read outcome data
#state='TX'
tab <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#tab<-tab[complete.cases(tab[,]),];
## Check that state and outcome are valid
checkState = tab[,7];
checkState = checkState[state==checkState]
if(length(checkState)<1){
stop("invalid state");
}
# outcome <-"heart attack"
out<-c("heart attack", "heart failure",  "pneumonia");
if(length(out[outcome==out])<1){
stop("invalid outcome");
}
## Return hospital name in that state with lowest 30-day death
## rate
max_name<-""
tab <- tab[state==tab[,7],];
if(outcome==out[2]){
tab_num <-tab;
tab_num[,17]<-as.numeric(unlist(tab[17]))
tab1<-tab_num[complete.cases(tab_num[,17]),];
#print(a)
#print(length(tab))
# names <- tab1[a==tab[,12],]
#names<-names[names$State==state,]
minval<-min(tab1[,17]);
min_tab<-tab1[(tab1[,17]==minval),]
names<-min_tab$Hospital.Name
#print(names)
max_name<-min(names)
max_name<-max_name[1]
}
else if(outcome==out[1]){
print('1')
tab_num <-tab;
tab_num[,11]<-as.numeric(unlist(tab[11]))
tab1<-tab_num[complete.cases(tab_num[11]),];
#print(a)
#print(length(tab))
# names <- tab1[a==tab[,12],]
print('1_1')
#names<-names[names$State==state,]
minval<-min(tab1[,11]);
min_tab<-tab1[(tab1[,11]==minval),]
names<-min_tab$Hospital.Name
#print(names)
print('1_2')
max_name<-min(names)
max_name<-max_name[1]
}
else if(outcome==out[3]){
tab_num <-tab;
tab_num[,23]<-as.numeric(unlist(tab[23]))
tab1<-tab_num[complete.cases(tab_num[,23]),];
#print(a)
#print(length(tab))
# names <- tab1[a==tab[,12],]
#names<-names[names$State==state,]
minval<-min(tab1[,23]);
min_tab<-tab1[(tab1[,23]==minval),]
names<-min_tab$Hospital.Name
#print(names)
max_name<-min(names)
max_name<-max_name[1]
}
max_name
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#state <- 'TX';
#outcome = "pneumonia";
tab <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#tab<-tab[complete.cases(tab[,]),];
## Check that state and outcome are valid
checkState = tab[,7];
checkState = checkState[state==checkState]
if(length(checkState)<1){
stop("invalid state");
}
# outcome <-"heart attack"
out<-c("heart attack", "heart failure",  "pneumonia");
if(length(out[outcome==out])<1){
stop("invalid outcome");
}
## Return hospital name in that state with lowest 30-day death
## rate
max_name<-NA
tab <- tab[state==tab[,7],];
if(outcome==out[2]){
tab_num <-tab;
tab_num[,17]<-as.numeric(unlist(tab[,17]))
tab1<-tab_num[complete.cases(tab_num),];
new_tab<-tab1[with(tab1, order(tab1[,17], tab1[,2])), ]
if(num == 'worst'){
max_name = new_tab[nrow(new_tab),2]
}
else if(num == 'best'){
max_name = new_tab[1,2]
}
else{
max_name = new_tab[num,2]
}
}
else if(outcome==out[1]){
tab_num <-tab;
tab_num[,11]<-as.numeric(unlist(tab[,11]))
tab1<-tab_num[complete.cases(tab_num),];
new_tab<-tab1[with(tab1, order(tab1[,11], tab1[,2])), ]
if(num == 'worst'){
max_name = new_tab[nrow(new_tab),2]
}
else if(num == 'best'){
max_name = new_tab[1,2]
}
else{
max_name = new_tab[num,2]
}
}
else if(outcome==out[3]){
tab_num <-tab;
tab_num[,23]<-as.numeric(unlist(tab[,23]))
tab1<-tab_num[complete.cases(tab_num),];
##    num = 10;
new_tab<-tab1[with(tab1, order(tab1[,23], tab1[,2])), ];
if(num == 'worst'){
max_name = new_tab[nrow(new_tab),2]
}
else if(num == 'best'){
max_name = new_tab[1,2]
}
else{
max_name = new_tab[num,2]
}
}
max_name
}
rankall <- function(outcome, num = "best") {
## Read outcome data
tab <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
out<-c("heart attack", "heart failure",  "pneumonia");
if(length(out[outcome==out])<1){
stop("invalid outcome");
}
res_name<-NULL;
## For each state, find the hospital of the given rank
new_tab<-data.frame(tab$Hospital.Name,tab$State,tab[,11],tab[,17],tab[,23])
colnames(new_tab) <- c("HospitalName","State","HADeath","HFDeath","PNDeath")
tab_com <- data.frame(new_tab[complete.cases(new_tab),],stringsAsFactors=FALSE);
## states<-unique(tab_com$State);
result <- data.frame();
if(outcome==out[1]){
tab_com[,3]<-as.numeric(levels(tab_com[,3])[tab_com[,3]]);
tab_com[,1]<-as.character(tab_com[,1]) ;
newdata <- tab_com[order(tab_com$State,tab_com$HADeath,tab_com$HospitalName),];
as.character(newdata[,1])
states<-as.character(unique(newdata$State));
if(num == 'worst'){
newdata <- newdata[!(newdata$HADeath=='Not Available'),];
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
for(state in states){
print(state)
state_flag <- newdata[newdata$State==state,];
num = nrow(state_flag);
result$x[i] = state_flag[num,1];
result$y[i] = state;
i = i+1;
}
}
else if(num == 'best'){
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
for(state in states){
state_flag <- newdata[newdata$State==state,];
num = 1;
result$x[i] = state_flag[num,1];
result$y[i] = state;
i = i+1;
}
}
else{
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
for(state in states){
state_flag <- newdata[newdata$State==state,];
#  i=1
# result[i,] = c(state_flag[num,state_flag$HospitalName],state_flag[num,state_flag$State]);
if(num>(length(state_flag$HospitalName))){
result$x[i] <- NA;
#   res_name[i] = state_flag[num,1];
}
else{
result$x[i] <- state_flag[num,1];
#     res_name[i] = state_flag[num,1];
}
result$y[i] <- state;
i = i+1;
}
}
}
else if(outcome==out[2]){
tab_com[,1]<-as.character(tab_com[,1]) ;
tab_com[,4]<- as.numeric(levels(tab_com[,4])[tab_com[,4]]);
newdata <- tab_com[order(tab_com$State,tab_com$HFDeath,tab_com$HospitalName),];
states<-as.character(unique(newdata$State));
if(num == 'worst'){
newdata <- newdata[!(newdata$HFDeath=='Not Available'),];
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
for(state in states){
print(state)
state_flag <- newdata[newdata$State==state,];
num = nrow(state_flag);
result$x[i] = state_flag[num,1];
result$y[i] = state;
i = i+1;
}
}
else if(num == 'best'){
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
for(state in states){
state_flag <- newdata[newdata$State==state,];
num = 1;
result$x[i] = state_flag[num,1];
result$y[i] = state;
i = i+1;
}
}
else{
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
for(state in states){
state_flag <- newdata[newdata$State==state,];
#  i=1
# result[i,] = c(state_flag[num,state_flag$HospitalName],state_flag[num,state_flag$State]);
if(num>(length(state_flag$HospitalName))){
result$x[i] <- NA;
#   res_name[i] = state_flag[num,1];
}
else{
result$x[i] <- state_flag[num,1];
#     res_name[i] = state_flag[num,1];
}
result$y[i] <- state;
i = i+1;
}
}
}
else if(outcome==out[3]){
#  tab_com[,5] <-as.numeric(tab_com[,5]) ;
tab_com[,1]<-as.character(tab_com[,1]) ;
tab_com[,5]<-as.numeric(levels(tab_com[,5])[tab_com[,5]])
#  as.character(tab_com[,1]) ;
newdata <- tab_com[order(tab_com$State,tab_com$PNDeath,tab_com$HospitalName),];
newdata[,1] <-as.character(newdata[,1])
states<-as.character(unique(newdata$State));
if(num == 'worst'){
newdata <- newdata[!(newdata$PNDeath=='Not Available'),];
newdata <- newdata[!is.na(newdata$PNDeath),];
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
# state="AK"
for(state in states){
print(state)
state_flag <- newdata[newdata$State==state,];
num = nrow(state_flag);
result$x[i] = state_flag[num,1];
result$y[i] = state;
i = i+1;
}
}
else if(num == 'best'){
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
for(state in states){
state_flag <- newdata[newdata$State==state,];
num = 1;
result$x[i] = state_flag[num,1];
result$y[i] = state;
i = i+1;
}
}
else{
i<-1;
result <- data.frame(x = character(54), y = character(54), stringsAsFactors = FALSE);
for(state in states){
state_flag <- newdata[newdata$State==state,];
#  i=1
# result[i,] = c(state_flag[num,state_flag$HospitalName],state_flag[num,state_flag$State]);
if(num>(length(state_flag$HospitalName))){
result$x[i] <- NA;
#   res_name[i] = state_flag[num,1];
}
else{
result$x[i] <- state_flag[num,1];
}
result$y[i] <- state;
i = i+1;
}
}
}
df <- data.frame(hospital=result[,1], state=result[,2])
result1 <- df
return(result1)
}
dispHist <- function(){
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character");
outcome[, 11] <- as.numeric(outcome[, 11]);
hist(outcome[, 11]);
}
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
swirl()
library(swirl)
swirl()
tf <- num_vect<1
tf''
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
c(my_char,"Subhendu")
my_name <- c(my_char,"Subhendu")
my_name
my_name <- c(my_char,"Subhendu", collapse = " ")
paste(my_name , collapse=" ")
paste("Hello", "world!", sep = " "),
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"),sep="")
LETTERS
paste(LETTERS, 1:4, sep = "-")
x < -(44, NA, 5, NA)
x <-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(vect)
vect2<-c(11, 2, NA)
names(vect2)<- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
1:20
my_vector <-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix. <- my_vector
my_matrix <- my_vector
?"matrix"
?matrix()
?matrix
my_matrix2 <- matrix(1:20,dim(4,5))
my_matrix2 <- dim(4,5)
dim(my_mareix2) <- c(4, 5)
dim(my_matrix2) <- c(4, 5)
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
indentical(my_matrix,my_matrix2)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina" , "Kelly" , "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5==7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE
)
TRUE |c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean( c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
sum()
submit()
my_mean( c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){})
evaluate(function(x){
x[0]
},c(8,4,0))
evaluate(function(x){x[0]},c(8,4,0))
info()
skip()
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){length(x)}, c(8, 4, 0))
skip()
?paste
paste("Programming", "is", "fun!")
submit()
submit()
skip()
telegram("sss")
info()
bye()
